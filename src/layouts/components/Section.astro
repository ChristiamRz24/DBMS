---
interface Props {
  pageName: string;
}

const { pageName } = Astro.props;
---

<div class="w-full bg-slate-800 flex flex-col">
  <div class="flex h-1/3">
    <div class="bg-inherit m-3 flex flex-col w-full gap-2">
      <header
        class="flex flex-wrap bg-slate-700 rounded-md px-3 py-2 font-semibold text-md"
      >
        Consultas SQL
        <button class="btn btn-xs btn-secondary mx-2" id="btn-ejecutar">
          Ejecutar
        </button>
        <!-- span que aparece si hay errores en la consulta -->
        <span class="text-red-400 hidden" id="error"></span>
      </header>
      <textarea
        placeholder="select * from mudanza;"
        class="textarea textarea-lg h-full resize-none bg-slate-700 focus:outline-none"
      ></textarea>
    </div>
  </div>
  <div class="bg-inherit bg-slate-500 h-2/3">
    <!-- Resultados consulta -->
    <header class="bg-slate-700 rounded-md px-3 py-2 font-semibold text-md m-3">
      Resultado consulta
      <button class="btn btn-xs btn-accent ms-2" id="btn-generar-reporte">
        Generar reporte
      </button>
    </header>
    <main class="overflow-y-auto bg-slate-700 rounded-md m-3">
      <table class="table table-sm" id="table">
        <thead></thead>
        <tbody></tbody>
      </table>
    </main>
  </div>
</div>

<script is:inline define:vars={{ pageName }}>
  let queryResult = [];

  const table = document.querySelector("#table");
  const textarea = document.querySelector("textarea");
  const btnEjecutar = document.querySelector("#btn-ejecutar");
  const btnGenerarReporte = document.querySelector("#btn-generar-reporte");

  if (queryResult.length === 0) {
    btnGenerarReporte.classList.add("btn-disabled");
  } else {
    btnGenerarReporte.classList.remove("btn-disabled");
  }

  btnEjecutar.addEventListener("click", async () => {
    const query = textarea.value;
    console.log(query);

    await fetchReport(query);
    console.log("queryResult:", queryResult);

    if (queryResult.length !== 0) {
      btnGenerarReporte.classList.remove("btn-disabled");
      addTableData();
    } else {
      // reset button styles and table data
      btnGenerarReporte.classList.add("btn-disabled");
      table.querySelector("thead").innerHTML = "";
      table.querySelector("tbody").innerHTML = "";
    }
  });

  const fetchReport = async (query) => {
    const formData = new FormData();
    formData.append("query", query);

    const response = await fetch(`/api/${pageName}/report/query.json`, {
      method: "POST",
      body: formData,
    });

    const data = await response.json();

    if (data.error) {
      const { code } = data.error;
      const message = data.message;
      const textContent = `Error ${code}: ${message}`;

      document.querySelector("#error").textContent = textContent;
      document.querySelector("#error").classList.remove("hidden");
      document.querySelector("#error").classList.add("block");
    } else {
      document.querySelector("#error").textContent = "";
      document.querySelector("#error").classList.remove("block");
      document.querySelector("#error").classList.add("hidden");

      queryResult = data;
    }

    return data;
  };

  const addTableData = () => {
    const thead = table.querySelector("thead");
    const tbody = table.querySelector("tbody");

    thead.innerHTML = "";
    tbody.innerHTML = "";

    const theadRow = document.createElement("tr");

    Object.keys(queryResult[0]).forEach((key) => {
      const th = document.createElement("th");
      th.textContent = key;
      theadRow.appendChild(th);
    });

    thead.appendChild(theadRow);

    queryResult.forEach((row) => {
      const tr = document.createElement("tr");

      Object.keys(row).forEach((key) => {
        const td = document.createElement("td");
        td.textContent = row[key];
        tr.appendChild(td);
      });

      tbody.appendChild(tr);
    });
  };
</script>
